#!/bin/bash

color='\033[1\0;31m'
endcolor='\033[0m'

function usage {
    echo 1>&2 -e $color
    echo 1>&2 -e "usage: $(basename $0) [keyword] [first] [last] [increment]" 2>&1
    echo 1>&2 -e $endcolor
    echo 1>&2 "$(basename $0)  kpoints_mp_spacing  0.07 0.01 -0.005"
    echo 1>&2 "$(basename $0)  cut_off_energy      300  1000  50"
    echo 1>&2 "$(basename $0)  fine_grid_scale     2.0  3.0  0.1"
    echo 1>&2 
    exit 1
}

if [ $# -ne 4 ]; then
    usage
fi

# run in directory containing input files for a CASTEP run

keyword=$1
first=$2
last=$3
increment=$4

## auto-determine seed

if [[ $(ls *.param | wc -l) -gt 1 ]]; then
    echo "check the param file"
    exit 0
fi
seed=$(ls *.param | awk 'BEGIN{FS=".param"} {print $1}')

ncores=$(nproc --all)

[[ $keyword == "kpoints_mp_spacing" ]] && keyword=${keyword^^}

sed -i "s/^task [[:print:]]*/task                      : singlepoint/gi" "$seed.param"

## Main

if [[ $keyword == "cut_off_energy" ]]; then
    values=$(seq -f "%.0f" "$first" "$increment" "$last")
elif [[ $keyword == "fine_grid_scale" ]]; then
    values=$(seq -f "%.1f" "$first" "$increment" "$last")
elif [[ $keyword == "KPOINTS_MP_SPACING" ]]; then
    values=$(seq -f "%.3f" "$first" "$increment" "$last")
else
    echo "Unknown keyword: $keyword"
    exit 1
fi

echo "keyword   :"$keyword
echo "first     :"$first
echo "last      :"$last
echo "increment :"$increment
echo "values    :"$values

if [ ! -f castep-conv.csv ]; then
    printf '%s,%s,%s,%s,%s,%s\n' 'cutoff_energy(eV)' 'grid_scale' 'fine_grid_scale' 'kpoint_spacing(A-1)' 'energy(eV/atom)' 'time(s)' >> castep-conv.csv
fi

for value in $values; do

    # initialize values
    
    cut=$(awk '/^cut_off_energy/ {printf "%.0f", $3}' $seed.param)
    gs=$(awk '/^grid_scale/ {printf "%.2f", $3}' $seed.param) 
    fgs=$(awk '/^fine_grid_scale/ {printf "%.2f", $3}' $seed.param)
    kpn=$(awk '/^KPOINTS_MP_SPACING/ {printf "%.3f", $2}' $seed.cell)
    
    gs=${gs:-1.75}   # Use default value if empty
    fgs=${fgs:-$gs}  # Use gs if fgs is empty

    # override the values

    case "$keyword" in
        cut_off_energy)
            cut="$value"
            ;;
        fine_grid_scale)
            fgs="$value"
            ;;
        KPOINTS_MP_SPACING)
            kpn="$value"
            ;;
    esac


    # prepare input files for a set of parameters

    dir="cut${cut}_gs${gs}_fgs${fgs}_kpn${kpn}"
    
    if [[ ! -d $dir ]]; then
	    mkdir $dir
	    cp $seed{.cell,.param} *.usp* *pot* $dir 2>/dev/null

	    cd $dir

        if [[ $keyword == "cut_off_energy" ]]; then
            sed -i "s/$keyword [[:print:]]*/$keyword : $cut/gi" "$seed.param"
        elif [[ $keyword == "fine_grid_scale" ]]; then
            sed -i "s/$keyword [[:print:]]*/$keyword : $fgs/gi" "$seed.param"
        elif [[ $keyword == "KPOINTS_MP_SPACING" ]]; then
            sed -i "s/$keyword [[:print:]]*/$keyword $kpn/gi" "$seed.cell"
        fi
        

        ## run castep

	    mpirun -n $ncores castep.mpi $seed
    else
        cd $dir
    fi


    ## parsing

    cut=$(awk -F':' '/plane wave basis set cut-off/ {print $2}' $seed.castep | awk '{print $1}')
    gs=$(awk -F':' '/size of standard grid/ {print $2}' $seed.castep | awk '{print $1}') 
    fgs=$(awk -F':' '/size of   fine   grid/ {print $2}' $seed.castep | awk '{print $1}')
    kpn=$(awk '/KPOINTS_MP_SPACING/ {print $2}' $seed.cell)

    [ -z $fgs ] && fgs=$gs
	
	# the output format for the energy is different between SOC and not SOC calculations, so here we determine which it is
	is_soc=$(awk '/spin-orbit coupling/ {print $4}' $seed.castep)

	# the same goes for non-metallic (fix_occupancy=true) and metallic calculations
	is_non_metallic=$(awk '/non-metallic/ {print}' $seed.castep)
	# this will be empty if the calculations is metallic

	if [ $is_soc == "off" ] && [ `python3 -c "print(int(not '$is_non_metallic'))"` -eq 1 ]; then
		# calculation is metallic and not spin-orbit coupled
		energy=$(awk '/Final energy/ {print $5}' $seed.castep)
	else
		energy=$(awk '/Final energy/ {print $4}' $seed.castep)
	fi	

	time=$(awk '/Total time/ {print $4}' $seed.castep)

	# determine number of atoms per UC in order to calculate the total energy per atom

	natoms=$(awk -F'=' '/Total number of ions in cell/ {print $2}' $seed.castep)
	energy_per_atom=$(python3 -c "print(float('$energy')/float('$natoms'))")


    ## print the results

    printf '%s,%s,%s,%s,%s,%s\n' $cut $gs $fgs $kpn $energy_per_atom $time >> ../castep-conv.csv
    sed 's/,/\t/g' ../castep-conv.csv > ../castep-conv.tsv
	
	rm -f $seed{.check,.bands,.castep_bin}

	cd ..
done

