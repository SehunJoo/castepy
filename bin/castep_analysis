#!/bin/bash

set -e

color='\033[1\0;31m'
endcolor='\033[0m'

function usage {
    echo 1>&2 -e $color
    echo 1>&2 -e "usage: $(basename $0) [-seed seed]" 2>&1
    echo 1>&2 -e $endcolor
    echo 1>&2 $(basename $0)  -conv
    echo 1>&2 $(basename $0)  -seed auto 
    echo 1>&2 $(basename $0)  -seed auto -conv
    exit 1
}

if [ $# -lt 1 ]; then
    usage
fi


# set defaults

opt_seed='auto'
opt_conv='false'

while [ $# -ge 1 ] ; do
    case $1 in
        -seed)
            opt_seed=$2; shift 2
            ;;
        -conv)
            opt_conv='true'; shift 1
            ;;
        -v|--verbose)
            opt_verbose='true'; shift 1
            ;;
        -h)
            usage
            ;;
        *)
            echo "invalid option: $1"
            echo
            usage
            ;;
    esac
done

# check before proceeding

if [[ $opt_seed == 'auto' ]]; then
    seed=$(ls *.cell | grep -v 'out.cell' | head -n 1 | awk 'BEGIN {FS=".cell"} {print $1}')
else
    seed=$opt_seed
fi

[[ ! -f $seed.castep ]] && ( echo "$seed.castep not found"; exit 1 )


# show input parameters

echo ""
echo "    ┌─┐┌─┐┌─┐┌┬┐┌─┐┌─┐  ┌─┐┌┐┌┌─┐┬ ┬ ┬┌─┐┬┌─┐"
echo "    │  ├─┤└─┐ │ ├┤ ├─┘  ├─┤│││├─┤│ └┬┘└─┐│└─┐"
echo "    └─┘┴ ┴└─┘ ┴ └─┘┴    ┴ ┴┘└┘┴ ┴┴─┘┴ └─┘┴└─┘"
echo ""
echo "      seed:       "$seed
echo ""

# Parsing input parameters

function casplit {

    # split concatenated castep file

    echo "split the $seed.castep file if concatenated ..."

    [[ ! -e $seed.castep ]] && echo "$seed.castep not found ..." && exit 1

    rm -f $seed-run-*.castep

    csplit -s -z -f $seed -b -run-%02d.castep $seed.castep '/CCC   AA    SSS  TTTTT  EEEEE  PPPP/' {*}

    rm -f $seed-run-00.castep
}

function parsing {

    # loop over splitted ${seed}.castep file

    header='true'
    for f in $(ls $seed-run-*.castep)
    do
        seedrun=${f%%.castep}

        echo "parsing $seedrun.castep file ..."

        ## get input from ${seed}.castep file
        input=''
        input=$(sed -n -r '/^ \*+ Title \*+/,/^\+\-+ MEMORY/p' $seedrun.castep)
        #echo "$input"; exit 1

        [[ -z $input ]] && echo "Input parameters not found ..." && continue


        ## parse General Parameters

        task=''
        calculate_stress=''

        task=$(echo "$input" | grep "type of calculation" | head -n 1 | awk 'BEGIN {FS=":"} {print $2}' | sed -e 's/^ *//g' -e 's/ *$//g')
        calculate_stress=$(echo "$input" | grep "stress calculation" | head -n 1 | awk 'BEGIN {FS=":"} {print $2}' | sed -e 's/^ *//g' -e 's/ *$//g')

        ## parse Exchange-Correlation Parameters

        xc_functional=''
        sedc_scheme=''

        xc_functional=$(echo "$input" | grep "using functional" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | sed -e 's/^ *//g' -e 's/ *$//g')
        sedc_scheme=$(echo "$input" | grep "DFT+D: Semi-empirical dispersion correction" | head -1 | awk 'BEGIN {FS=":"} {print $NF}' | sed -e 's/^ *//g' -e 's/ *$//g')

        if [[ $xc_functional == 'Perdew Burke Ernzerhof' ]]; then
            xc_functional='PBE'
        elif [[ $xc_functional == 'PBE for solids (2008)' ]]; then
            xc_functional='PBESOL'
        fi

        ## parse Basis Set Parameters

        cut_off_energy=''
        grid_scale=''
        fine_grid_scale=''
        finite_basis_corr=''

        cut_off_energy=$(echo "$input" | grep "plane wave basis set cut-off" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')
        grid_scale=$(echo "$input" | grep "size of standard grid" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')
        fine_grid_scale=$(echo "$input" | grep "size of   fine   grid" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')
        finite_basis_corr=$(echo "$input" | grep "finite basis set correction" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')

        ## parse Electronic Parameters

        nelectrons=''
        spin=''
        spin_polarized=''
        nbands=''

        nelectrons=$(echo "$input" | grep "number of  electrons" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')
        spin=$(echo "$input" | grep "net spin   of system" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')
        spin_polarized=$(echo "$input" | grep "treating system as spin-polarized" | head -1 | awk '{print $4}')
        nbands=$(echo "$input" | grep "number of bands" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')

        if [[ $spin_polarized == 'spin-polarized' ]]; then
            spin_polarized='true'
        else
            spin_polarized='false'
        fi

        ## parse Electronic Minimization Parameters

        metals_method=''
        elec_energy_tol=''
        smearing_width=''
        dipole_correction=''
        dipole_dir=''

        metals_method=$(echo "$input" | grep " Method" | head -1 | awk 'BEGIN {FS="with "} {print $2}' | awk 'BEGIN {FS=" treatment"} {print $1}')
        elec_energy_tol=$(echo "$input" | grep 'total energy / atom convergence tol.' | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')
        smearing_width=$(echo "$input" | grep "smearing width" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')
        dipole_correction=$(echo "$input" | grep "periodic dipole correction" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | sed -e 's/^ *//g' -e 's/ *$//g')
        dipole_dir=$(echo "$input" | grep "correcting slab dipole in direction" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')

        if [[ $metals_method == 'density mixing' ]]; then
            metals_method='dm'
        elif [[ $metals_method == 'ensemble DFT' ]]; then
            metals_method='edft'
        fi
        [[ -z $dipole_dir ]] && dipole_dir="NaN"

        ## parse Geometry Optimization Parameters

        fixed_npw=''
        geom_spin_fix=''
        geom_energy_tol=''
        geom_force_tol=''
        geom_disp_tol=''
        geom_stress_tol=''

        fixed_npw=$(echo "$input" | grep "variable cell method" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | sed -e 's/^ *//g' -e 's/ *$//g')
        geom_spin_fix=$(echo "$input" | sed -n '/^  with spin/p' | head -1 | awk 'BEGIN {FS="for all steps"} {print $1}' | awk '{print $NF}')
        geom_energy_tol=$(echo "$input" | grep "total energy convergence tolerance" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')
        geom_force_tol=$(echo "$input" | grep "max ionic |force| tolerance" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')
        geom_disp_tol=$(echo "$input" | grep "max ionic |displacement| tolerance" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')
        geom_stress_tol=$(echo "$input" | grep "max |stress component| tolerance" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | awk '{print $1}')


        ## parse Unit Cell

        a=''
        b=''
        c=''
        alpha=''
        beta=''
        gamma=''
        volume=''
        density=''

        a=$(echo "$input" | grep -w "a =" | head -n 1 | awk 'BEGIN {FS=" a ="} {print $2}' | awk '{print $1}')
        b=$(echo "$input" | grep -w "b =" | head -n 1 | awk 'BEGIN {FS=" b ="} {print $2}' | awk '{print $1}')
        c=$(echo "$input" | grep -w "c =" | head -n 1 | awk 'BEGIN {FS=" c ="} {print $2}' | awk '{print $1}')
        alpha=$(echo "$input" | grep -w "alpha =" | head -n 1 | awk 'BEGIN {FS=" alpha ="} {print $2}' | awk '{print $1}')
        beta=$(echo "$input" | grep -w "beta  =" | head -n 1 | awk 'BEGIN {FS=" beta  ="} {print $2}' | awk '{print $1}')
        gamma=$(echo "$input" | grep -w "gamma =" | head -n 1 | awk 'BEGIN {FS=" gamma ="} {print $2}' | awk '{print $1}')
        volume=$(echo "$input" | grep -w "volume =" | head -n 1 | awk 'BEGIN {FS="[=]"} {print $2}' | awk '{print $1}')
        density=$(echo "$input" | grep "g/cm^3" | head -n 1 | awk 'BEGIN {FS="="} {print $2}' | awk '{print $1}')

        ## parse Cell Contents

        nions=''

        nions=$(echo "$input" | grep "Total number of ions in cell" | head -1 | awk 'BEGIN {FS="="} {print $2}' | awk '{print $1}')

        ## parse Details of Species

        hubbard=''

        if [[ $(echo "$input" | grep "Hubbard U   values by orbital type" | wc -l) -gt 0 ]]; then
            hubbard=$(echo "$input" | sed -n '/Hubbard U   values by orbital type/,/xx/p' | sed '/|--/,/xx/!d;//d' | head -n $nions \
                          | grep -v "0.00000    0.00000    0.00000    0.00000" | awk '{printf "%s:%4.2f\n", $1, $5}' | uniq \
                          | sed -n 's/^|//p' | sed -z -n 's/\n/ /gp')
        else
            hubbard='NaN'
        fi

        ## parse k-Points for BZ sampling

        kpoints_mp_grid=''
        kpoints_mp_spacing=''

        kpoints_mp_grid=$(echo "$input" | grep "MP grid size for SCF calculation is" | head -1 | awk 'BEGIN {FS="is"} {print $2}' | sed -e 's/^ *//g' -e 's/ *$//g')
        kpoints_mp_spacing=$(grep "KPOINTS_MP_SPACING" $seed.cell | awk '{print $2}')


        ## parse Symmetry and Constraints

        symmops=''
        spacegroup=''
        cell_constraints=''

        symmops=$(echo "$input" | grep "Number of symmetry operations" | head -1 | awk 'BEGIN {FS="="} {print $2}' | awk '{print $1}')
        spacegroup=$(echo "$input" | grep "Space group of crystal =" | head -1 | awk 'BEGIN {FS="[:]|[,]"} {print $2}' | awk '{print $1}')
        cell_constraints=$(echo "$input" | grep "Cell constraints" | head -1 | awk 'BEGIN {FS=":"} {print $2}' | sed -e 's/^ *//g' -e 's/ *$//g')


        ## save as tsv

        if [[ $header == 'true' ]]; then        
            (
                printf "%s\t" "task"

                printf "%s\t" "xc_functional"
                printf "%s\t" "sedc_scheme"

                printf "%s\t" "cut_off_energy"
                printf "%s\t" "grid_scale"
                printf "%s\t" "fine_grid_scale"
                printf "%s\t" "finite_basis_corr"

                printf "%s\t" "nelectrons"
                printf "%s\t" "spin"
                printf "%s\t" "spin_polarized"
                printf "%s\t" "nbands"

                printf "%s\t" "metals_method"
                printf "%s\t" "elec_energy_tol"
                printf "%s\t" "smearing_width"
                printf "%s\t" "dipole_correction"
                printf "%s\t" "dipole_dir"

                printf "%s\t" "fixed_npw"
                printf "%s\t" "geom_energy_tol"
                printf "%s\t" "geom_force_tol"
                printf "%s\t" "geom_disp_tol"
                printf "%s"   "geom_stress_tol"
                printf "\n"
            ) > data-input-param.tsv

        fi
            (
                printf "%s\t" "$task"

                printf "%s\t" "$xc_functional"
                printf "%s\t" "$sedc_scheme"

                printf "%s\t" "$cut_off_energy"
                printf "%s\t" "$grid_scale"
                printf "%s\t" "$fine_grid_scale"
                printf "%s\t" "$finite_basis_corr"

                printf "%s\t" "$nelectrons"
                printf "%s\t" "$spin"
                printf "%s\t" "$spin_polarized"
                printf "%s\t" "$nbands"

                printf "%s\t" "$metals_method"
                printf "%s\t" "$elec_energy_tol"
                printf "%s\t" "$smearing_width"
                printf "%s\t" "$dipole_correction"
                printf "%s\t" "$dipole_dir"

                printf "%s\t" "$fixed_npw"
                printf "%s\t" "$geom_energy_tol"
                printf "%s\t" "$geom_force_tol"
                printf "%s\t" "$geom_disp_tol"
                printf "%s"   "$geom_stress_tol"
                printf "\n"
            ) >> data-input-param.tsv

        if [[ $header == 'true' ]]; then        
            (
                printf "%s\t" "a(Å)"
                printf "%s\t" "b(Å)"
                printf "%s\t" "c(Å)"
                printf "%s\t" "α(°)"
                printf "%s\t" "β(°)"
                printf "%s\t" "γ(°)"
                printf "%s\t" "volume(Å**3)"
                printf "%s\t" "density(g/cc)"

                printf "%s\t" "nions"
                printf "%s\t" "hubbard"
                printf "%s\t" "kpoints_mp_spacing"
                printf "%s\t" "kpoints_mp_grid"
                printf "%s\t" "symmops"
                printf "%s\t" "spacegroup"
                printf "%s"   "cell_constraints"
                printf "\n"
            ) > data-input-cell.tsv

        fi
            (
                printf "%s\t" "$a"
                printf "%s\t" "$b"
                printf "%s\t" "$c"
                printf "%s\t" "$alpha"
                printf "%s\t" "$beta"
                printf "%s\t" "$gamma"
                printf "%s\t" "$volume"
                printf "%s\t" "$density"

                printf "%s\t" "$nions"
                printf "%s\t" "$hubbard"
                printf "%s\t" "$kpoints_mp_spacing"
                printf "%s\t" "$kpoints_mp_grid"
                printf "%s\t" "$symmops"
                printf "%s\t" "$spacegroup"
                printf "%s"   "$cell_constraints"
                printf "\n"
            ) >> data-input-cell.tsv

        [[ $opt_verbose == 'true' ]] && catcsv data-input-param.tsv && echo
        [[ $opt_verbose == 'true' ]] && catcsv data-input-cell.tsv && echo

        # =========================================================================================


        ## check if geometry optimization is done successfully

        stat=''
        if [[ $(tail -20 $seedrun.castep | grep "Total time          = " | awk '{print $1}') != "Total" ]]; then
            stat='ongoing'
        elif [[ $task == 'single point energy' ]]; then
            stat='NULL'
        elif [[ $task == 'geometry optimization' ]]; then
            if [[ $(sed -n '/Geometry optimization/p' $seedrun.castep | sed -n '/failed/p' | wc -l) -eq 1 ]]; then
                stat='failed'
            elif [[ $(sed -n '/Geometry optimization/p' $seedrun.castep | sed -n '/completed/p' | wc -l) -eq 1 ]]; then
                stat='completed'
            else
                stat='error-checkfile'
            fi
        else
            echo "check task" && exit 1
        fi

        niter=$(sed -n '/: finished iteration/p' $seedrun.castep | tail -n 1 | awk '{print $4}')
        [[ -z $niter ]] && niter='NaN'

        ## parse final configuration

        fconfig=''
        if [[ $task == 'single point energy' ]]; then
            fconfig=$(cat $seedrun.castep)
        elif [[ $task == 'geometry optimization' ]]; then
            fconfig=$(sed -n '/: Final Configuration/,/Total time          =/p' $seedrun.castep)
        fi
        
        [[ -z $fconfig ]] && echo "Final Configuration not found ..."
            
        ## parse Unit Cell

        a=''
        b=''
        c=''
        alpha=''
        beta=''
        gamma=''
        volume=''
        density=''

        a=$(echo "$fconfig" | grep -w "a =" | tail -n 1 | awk 'BEGIN {FS=" a ="} {print $2}' | awk '{print $1}')
        b=$(echo "$fconfig" | grep -w "b =" | tail -n 1 | awk 'BEGIN {FS=" b ="} {print $2}' | awk '{print $1}')
        c=$(echo "$fconfig" | grep -w "c =" | tail -n 1 | awk 'BEGIN {FS=" c ="} {print $2}' | awk '{print $1}')
        alpha=$(echo "$fconfig" | grep -w "alpha =" | tail -n 1 | awk 'BEGIN {FS=" alpha ="} {print $2}' | awk '{print $1}')
        beta=$(echo "$fconfig" | grep -w "beta  =" | tail -n 1 | awk 'BEGIN {FS=" beta  ="} {print $2}' | awk '{print $1}')
        gamma=$(echo "$fconfig" | grep -w "gamma =" | tail -n 1 | awk 'BEGIN {FS=" gamma ="} {print $2}' | awk '{print $1}')
        volume=$(echo "$fconfig" | grep -w "volume =" | tail -n 1 | awk 'BEGIN {FS="[=]"} {print $2}' | awk '{print $1}')
        density=$(echo "$fconfig" | grep "g/cm^3" | tail -n 1 | awk 'BEGIN {FS="="} {print $2}' | awk '{print $1}')

        # parse Enthalpy

        enthalpy=''
        enthalpy=$(echo "$fconfig" | grep -E -e "Final Enthalpy|corrected final free|Final free energy|Final energy" \
                   | tail -n 1 | awk 'BEGIN {FS="="} {print $2}' | awk '{printf "%.8f", $1}')

        # parse if snap_to_symmetry

        snap_to_symmetry=''

        if [[ $(echo "$fconfig" | grep "Symmetrised Forces" | wc -l) -ge 1 ]]; then
            snap_to_symmetry='true'
        else
            snap_to_symmetry='false'
        fi

        # parse Pressure

        pressure=''
        pressure=$(echo "$fconfig" | grep "Pressure:" | tail -n 1 | awk 'BEGIN {FS="[*]|[:]"} {print $3}' | awk '{print $1}')
        [[ -z $pressure ]] && pressure='NaN'


        # parse Mulliken Spin (total)

        spinmom=''
        spinmom=$(echo "$fconfig" | sed -n '/Total   Charge(e)   Spin(hbar\/2)/,/Spin       Length (A)/p' \
                  | sed '/==/,/==/!d;//d' | grep -v "dn" | tail -n $nions | awk '{sum += $10} END {print sum}')

        #spin=''
        #modspin=''
        #spin=$(grep " Spin Den" $seedrun.castep 2> /dev/null | tail -1 | awk '{print $5}')
        #modspin=$(grep " |Spin Den" $seedrun.castep 2> /dev/null | tail -1 | awk '{print $5}')


        ## parse Mulliken Spin (atom)

        echo "$fconfig" | sed -n '/Total   Charge(e)   Spin(hbar\/2)/,/Spin       Length (A)/p' \
         | sed '/==/,/==/!d;//d' | grep -v "dn" | tail -n $nions | awk '{print $1, $10}' > data-mullikenspin.dat

        #cat mullikenspin.dat | awk '{printf "%s=%.2f\n", $1, $2}' | sort -k 1 -u

        ion_spin=$(cat data-mullikenspin.dat | awk '{printf "%s=%.2f\n", $1, $2}' | sort -k 1 -u | awk '{printf "%s, ",$1}')

        # save as tsv

        if [[ $header == 'true' ]]; then        
            (
                printf "%s\t" "status"
                printf "%s\t" "niter"

                printf "%s\t" "a(Å)"
                printf "%s\t" "b(Å)"
                printf "%s\t" "c(Å)"
                printf "%s\t" "α(°)"
                printf "%s\t" "β(°)"
                printf "%s\t" "γ(°)"
                printf "%s\t" "volume(Å**3)"
                printf "%s\t" "density(g/cc)"

                printf "%s\t" "enthalpy(eV)"
                printf "%s\t" "snap_to_symmetry"
                printf "%s\t" "pressure(GPa)"
                printf "%s\t" "spin(hbar/2/cell)"
                printf "%s"   "spin(hbar/2/ion)"
                printf "\n"
            ) > data-output.tsv
        fi
            (
                printf "%s\t" "$stat"
                printf "%s\t" "$niter"

                printf "%s\t" "$a"
                printf "%s\t" "$b"
                printf "%s\t" "$c"
                printf "%s\t" "$alpha"
                printf "%s\t" "$beta"
                printf "%s\t" "$gamma"
                printf "%s\t" "$volume"
                printf "%s\t" "$density"

                printf "%s\t" "$enthalpy"
                printf "%s\t" "$snap_to_symmetry"
                printf "%s\t" "$pressure"
                printf "%s\t" "$spinmom"
                printf "%s"   "$ion_spin"
                printf "\n"                  
            ) >> data-output.tsv

        [[ $opt_verbose == 'true' ]] && catcsv data-output.tsv && echo

        header='false'

        [[ -z $fconig ]] && castep2res $seedrun > $seedrun-out.res
    done

    paste data-input-param.tsv data-input-cell.tsv data-output.tsv > data.tsv

    ## generate res file ...

    castep2res $seed > $seed-out.res

    echo "for copying to sheet..."

    echo && cat data-input-param.tsv && echo
    echo && cat data-input-cell.tsv && echo
    echo && cat data-output.tsv && echo 

    echo "for pretty print..."

    echo && catcsv data-input-param.tsv && echo
    echo && catcsv data-input-cell.tsv && echo
    echo && catcsv data-output.tsv && echo 

}



# Monitor convergence

function conv {
    echo -e $color
    echo -e "check if geometry optimization is completed successfully ... (every castep run)"
    echo -e $endcolor

    grep -q "Geometry optimization" $seed.castep && grep "Geometry optimization" $seed.castep

    nions=$(grep "Total number of ions in cell =" $seed.castep | head -n 1 | awk '{print $8}')
    nrun=$(grep "Total time          =" $seed.castep | wc -l)

 
    #echo -e $color
    #echo "check if energy is converged ... (every optimization step)"
    #echo -e $endcolor
    #grep "LBFGS: finished iteration" $seed.castep | awk '{printf("%s\t%.6f eV\n", $4, $7)}'



    echo -e $color
    echo "every SCF iteration"
    echo -e $endcolor

    iteration=$(sed -n '/LBFGS: [si][a-z]* iteration/,/Final energy/p' $seed.castep)
    echo "$iteration" | grep -w 'LBFGS:'     | awk '{printf "%d_%s%s\n", $4, $1, $2}' > step.dat.temp
    echo "$iteration" | grep -w 'a ='        | awk '{printf "%.2f\n", $3}' > a.dat.temp
    echo "$iteration" | grep -w 'b ='        | awk '{printf "%.2f\n", $3}' > b.dat.temp
    echo "$iteration" | grep -w 'c ='        | awk '{printf "%.2f\n", $3}' > c.dat.temp
    echo "$iteration" | grep -w 'alpha ='    | awk '{printf "%.2f\n", $6}' > alpha.dat.temp
    echo "$iteration" | grep -w 'beta  ='    | awk '{printf "%.2f\n", $6}' > beta.dat.temp
    echo "$iteration" | grep -w 'gamma ='    | awk '{printf "%.2f\n", $6}' > gamma.dat.temp
    echo "$iteration" | grep -w 'volume ='   | awk '{printf "%.2f\n", $5}' > volume.dat.temp
    echo "$iteration" | grep -w 'g/cm^3'     | awk '{printf "%.2f\n", $2}' > density.dat.temp
    echo "$iteration" | grep ' Spin Density' | awk '{printf "%.2f\n", $5}' > spin.dat.temp
    echo "$iteration" | grep 'Final energy'  | awk '{printf "%.6f\n", $5}' > energy.dat.temp

    printf "step\ta\tb\tc\talpha\tbeta\tgamma\tvolume\tdensity\tspin\tenergy\n" > conv.dat
    paste step.dat.temp \
          a.dat.temp \
          b.dat.temp \
          c.dat.temp \
          alpha.dat.temp \
          beta.dat.temp \
          gamma.dat.temp \
          volume.dat.temp \
          density.dat.temp \
          spin.dat.temp \
          energy.dat.temp \
    >> conv.dat
    cat conv.dat

    rm -f *.dat.temp

    echo -e $color
    echo "every CASTEP run - Final Configuaration"
    echo -e $endcolor

    nions=$(grep "Total number of ions in cell =" $seed.castep | tail -n 1 | awk '{print $8}')
    grep "Space group of crystal =" $seed.castep | awk 'BEGIN {FS=":|,"} {printf("%s\n", $2)}'  > spacegroup.dat.temp

    fconfig=$(sed -n '/LBFGS: Final Configuration/,/Total time          =/p' $seed.castep)
    echo "$fconfig" | grep -w 'a ='     | awk '{printf "%.2f\n", $3}' > a.dat.temp
    echo "$fconfig" | grep -w 'b ='     | awk '{printf "%.2f\n", $3}' > b.dat.temp
    echo "$fconfig" | grep -w 'c ='     | awk '{printf "%.2f\n", $3}' > c.dat.temp
    echo "$fconfig" | grep -w 'alpha =' | awk '{printf "%.2f\n", $6}' > alpha.dat.temp
    echo "$fconfig" | grep -w 'beta  =' | awk '{printf "%.2f\n", $6}' > beta.dat.temp
    echo "$fconfig" | grep -w 'gamma =' | awk '{printf "%.2f\n", $6}' > gamma.dat.temp
    echo "$fconfig" | grep -w 'volume ='| awk '{printf "%.2f\n", $5}' > volume.dat.temp
    echo "$fconfig" | grep -w 'g/cm^3'  | awk '{printf "%.2f\n", $2}' > density.dat.temp
    echo "$fconfig" | grep -w 'LBFGS: Final Enthalpy'  | awk '{printf "%.6f\n", $5}' > energy.dat.temp
    echo "$fconfig" | sed -n '/Total   Charge(e)   Spin(hbar\/2)/,/Spin       Length (A)/p' \
          | sed '/==/,/==/!d;//d' | grep -v dn | awk "{f=int((FNR-1)/($nions))+1; print >> \"spin.dat.temp.\"f}"
    if ls spin.dat.temp.* &>/dev/null; then
        for spindat in $(ls spin.dat.temp.* 2>/dev/null)
        do
            cat $spindat | awk '{sum += $10} END {print sum}' >> spin.dat.temp
            rm -f $spindat
        done
    else
        touch spin.dat.temp
    fi

    printf "spacegroup\ta\tb\tc\talpha\tbeta\tgamma\tvolume\tdensity\tenergy\tspin\n" > conv.dat
    paste spacegroup.dat.temp \
          a.dat.temp \
          b.dat.temp \
          c.dat.temp \
          alpha.dat.temp \
          beta.dat.temp \
          gamma.dat.temp \
          volume.dat.temp \
          density.dat.temp \
          energy.dat.temp \
          spin.dat.temp \
    >> conv.dat
    cat conv.dat

    rm -f *.dat.temp

}

function dryrun {
    if [[ ! -d ./dryrun ]]; then
        mkdir ./dryrun
        cp $seed.cell $seed.param ./dryrun
        cd ./dryrun;

        if [[ `grep SPIN= $seed.cell | wc -l` -gt 0 ]]; then
            grep -v -i "spin " $seed.param > $seed.param.dat
            echo "spin : " `grep SPIN= $seed.cell| awk 'BEGIN {FS="SPIN="};{ sum += $2 } END {print sum}'` >> $seed.param.dat
            mv $seed.param.dat $seed.param
        fi

        castep -d $seed;

        cd ../
    else
        echo "dryrun directory is detected ..."
    fi

    echo "parsing lattice parameters ..."
    lata=`grep "a =" ./dryrun/$seed.castep | awk 'BEGIN {FS=" a ="} {print $2}' | awk '{print $1}'`
    latb=`grep "b =" ./dryrun/$seed.castep | awk 'BEGIN {FS=" b ="} {print $2}' | awk '{print $1}'`
    latc=`grep "c =" ./dryrun/$seed.castep | awk 'BEGIN {FS=" c ="} {print $2}' | awk '{print $1}'`
    latalpha=`grep "alpha =" ./dryrun/$seed.castep | awk 'BEGIN {FS=" alpha ="} {print $2}' | awk '{print $1}'`
    latbeta=`grep "beta  =" ./dryrun/$seed.castep | awk 'BEGIN {FS=" beta  ="} {print $2}' | awk '{print $1}'`
    latgamma=`grep "gamma =" ./dryrun/$seed.castep | awk 'BEGIN {FS=" gamma ="} {print $2}' | awk '{print $1}'`
    echo "    a = "$lata" A"
    echo "    b = "$latb" A"
    echo "    c = "$latc" A"
    echo "    alpha = "$latalpha" deg"
    echo "    beta  = "$latbeta" deg"
    echo "    gamma = "$latgamma" deg"
    echo
}

casplit
parsing


[[ $opt_conv == 'true' ]] && conv

exit 0
