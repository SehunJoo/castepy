#!/bin/bash

set -e

color='\033[1\0;31m'
endcolor='\033[0m'

function usage {
    echo 1>&2 -e $color
    echo 1>&2 -e "usage: $(basename $0) [task]"
    echo 1>&2 -e $endcolor
    echo 1>&2 "$(basename $0)  singlepoint"
    echo 1>&2 "$(basename $0)  geometryoptimization"
    echo 1>&2
    exit 1
}

if [ $# -lt 1 ]; then
    usage
fi

case $1 in
    singlepoint | geometryoptimization)
        task=$1
        ;;
    workfunction) # user-defined
        task=$1
        ;;
    *)
        echo "invalid option: $1"
        usage
        ;;
esac

# main

for seed in $(ls *.param | awk 'BEGIN {FS=".param"} {print $1}')
do
    echo -e "change $seed.param : task to $task\n"


    if [[ $task == "singlepoint" ]]
    then
        # single point energy calculation
        # seed.castep_bin : population analysis
        # seed.check      : required to restart if SCF fails to converge

        keys="task write_checkpoint backup_interval continuation"

        for key in $keys
        do
            nkey=$(sed -n "/^$key/p" $seed.param | wc -l)
            if [[ $nkey -ne 1 ]]
            then
                sed -i "/^$key/d" $seed.param
                printf "%-25s : \n" "$key" >> $seed.param
            fi
        done

        sed -i 's/^task [[:print:]]*/task                      : singlepoint/'      $seed.param
        sed -i 's/^write_checkpoint [[:print:]]*/write_checkpoint          : all/'  $seed.param
        sed -i 's/^backup_interval [[:print:]]*/backup_interval           : 82800/' $seed.param
        sed -i 's/^continuation [[:print:]]*/continuation              : default/'  $seed.param

        for key in $keys
        do
            sed -n "/^$key/p" $seed.param
        done

        echo -e "\n** for additional analysis **\n"
        echo -e "$(basename $0) workfunction\n"

    elif [[ $task == "workfunction" ]]
    then
        # work function calculation
        # seed.cst_esp : electrostatic potential data
        # seed.bands   : Fermi energy

        keys="write_cst_esp write_bands"

        for key in $keys
        do
            nkey=$(sed -n "/^$key/p" $seed.param | wc -l)
            if [[ $nkey -ne 1 ]]
            then
                sed -i "/^$key/d" $seed.param
                printf "%-25s : \n" "$key" >> $seed.param
            fi
        done

        sed -i 's/^write_cst_esp [[:print:]]*/write_cst_esp             : true/'  $seed.param
        sed -i 's/^write_bands [[:print:]]*/write_bands               : true/'     $seed.param

        for key in $keys
        do
            sed -n "/^$key/p" $seed.param
        done

    elif [[ $task == "geometryoptimization" ]]
    then
        # backup_interval and num_backup_iter options cannot speciifed together
        # Error in parameters file: duplication with keywords BACKUP_INTERVAL and NUM_BACKUP_ITER

        keys="task write_checkpoint write_cst_esp write_bands backup_interval continuation"

        for key in $keys
        do
            nkey=$(sed -n "/^$key/p" $seed.param | wc -l)
            if [[ $nkey -ne 1 ]]
            then
                sed -i "/^$key/d" $seed.param
                printf "%-25s : \n" "$key" >> $seed.param
            fi
        done

        sed -i 's/^task [[:print:]]*/task                      : geometryoptimization/' $seed.param

        sed -i 's/^write_checkpoint [[:print:]]*/write_checkpoint          : all/' $seed.param
        sed -i 's/^write_cst_esp [[:print:]]*/write_cst_esp             : false/' $seed.param
        sed -i 's/^write_bands [[:print:]]*/write_bands               : false/' $seed.param


        sed -i 's/backup_interval [[:print:]]*/backup_interval           : 300/' $seed.param
        #sed -i 's/num_backup_iter [[:print:]]*/num_backup_iter           : 5/' $seed.param

        sed -i 's/continuation [[:print:]]*/continuation              : default/' $seed.param

        for key in $keys
        do
            sed -n "/^$key/p" $seed.param
        done

        echo -e "\n** for changing tolerance **\n"
        echo -e "param-tol express\n"
        echo -e "param-tol default\n"
        echo -e "param-tol ultrafine\n"
    else
        echo "$task is not available"
        exit 1
    fi

done

exit 0
